<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git基本命令</title>
      <link href="/2023/09/25/git-ji-ben-ming-ling/"/>
      <url>/2023/09/25/git-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本的linux命令"><a href="#一、基本的linux命令" class="headerlink" title="一、基本的linux命令"></a>一、基本的linux命令</h3><p><code>cd</code> 进入某个目录</p><p><code>pwd</code> 显示当前目录路径</p><p><code>ls(ll)</code> 列出当前目录的文件 <code>ll</code>就是<code>ls -l</code>，列出详细信息</p><p><code>touch</code> 新建一个文件</p><p><code>rm</code> 删除要给文件，加上<code>-rf</code>，就是强制删除目录</p><p><code>mkdir</code> 新建一个目录</p><p><code>mv</code> 移动文件，或者是更改文件名称</p><pre class="line-numbers language-none"><code class="language-none">`mv index.html ./aa`，这就是将`index.html`移动到`./aa`目录下。`mv index.html ./aa/bb.html`，这是就是将`index.html`移动到`./aa`目录下并改名为`bb.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>reset</code> 重新初始化终端/清屏</p><p><code>clear</code> 清屏</p><p><code>history</code> 查看命令历史</p><p><code>help</code> 帮助</p><p><code>#</code> 代表注释</p><p><code>cat</code> 显示文件内容</p><h3 id="二、git配置"><a href="#二、git配置" class="headerlink" title="二、git配置"></a>二、git配置</h3><p><code>git config -l</code> 查看当前git环境详细配置</p><h4 id="2-1、查看系统config"><a href="#2-1、查看系统config" class="headerlink" title="2.1、查看系统config"></a>2.1、查看系统config</h4><pre class="line-numbers language-none"><code class="language-none">git config --system --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件在<code>git安装目录/etc/gitconfig</code></p><h4 id="2-2、查看当前用户配置"><a href="#2-2、查看当前用户配置" class="headerlink" title="2.2、查看当前用户配置"></a>2.2、查看当前用户配置</h4><pre class="line-numbers language-none"><code class="language-none">git config --global --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件在<code>~/.gitconfig</code></p><h4 id="2-3、查看当前仓库配置信息"><a href="#2-3、查看当前仓库配置信息" class="headerlink" title="2.3、查看当前仓库配置信息"></a>2.3、查看当前仓库配置信息</h4><pre class="line-numbers language-none"><code class="language-none">git config --local --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置文件在<code>当前项目的/.git/config</code></p><h4 id="2-4、修改git配置"><a href="#2-4、修改git配置" class="headerlink" title="2.4、修改git配置"></a>2.4、修改git配置</h4><pre class="line-numbers language-none"><code class="language-none">git config [--local][--global][--system] section.key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git config --local user.name huhuhu</code> 设置当前项目的用户名</p><p><code>git config --global core.quotepath false</code> 配置当前用户的编码项，可以解决中文编码问题</p><p><code>git config --local core.ignorecase false</code> 配置当前项目不忽略文件大小写，git默认忽略文件名的大小写，这点值得注意</p><h3 id="三、git基本知识"><a href="#三、git基本知识" class="headerlink" title="三、git基本知识"></a>三、git基本知识</h3><pre class="line-numbers language-none"><code class="language-none">使用远程仓库时候会有多个协议可以选择，使用https不仅仅速度慢，而且每次push都要输入口令。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1、git关键字解释"><a href="#3-1、git关键字解释" class="headerlink" title="3.1、git关键字解释"></a>3.1、git关键字解释</h4><hr><p><code>HEAD</code> 当前版本的指针，当切换本地版本的时候会快速指向指定版本文件</p><p><code>master</code> git为我们创建主分支</p><p><code>origin</code> 远程仓库的名称</p><h4 id="3-2、git文件的四种状态"><a href="#3-2、git文件的四种状态" class="headerlink" title="3.2、git文件的四种状态"></a>3.2、git文件的四种状态</h4><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/git%E6%96%87%E4%BB%B6%E5%9B%9B%E7%A7%8D%E7%8A%B6%E6%80%81.png" alt="image-20230925102448054"></p><ul><li>Untracked：未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify：文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified：文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</li><li>Staged：暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h3 id="四、git常用命令"><a href="#四、git常用命令" class="headerlink" title="四、git常用命令"></a>四、git常用命令</h3><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" alt="image-20230925102541185"></p><h4 id="4-1、init-amp-amp-clone"><a href="#4-1、init-amp-amp-clone" class="headerlink" title="4.1、init &amp;&amp; clone"></a>4.1、init &amp;&amp; clone</h4><p><code>git init</code> 在当前目录新建一个仓库</p><p><code>git init [project-name]</code> 在一个目录下新建本地仓库</p><p><code>git clone [url]</code> 克隆一个远程仓库</p><h4 id="4-2、diff"><a href="#4-2、diff" class="headerlink" title="4.2、diff"></a>4.2、diff</h4><hr><p><code>git diff HEAD -- .</code> 查看最新本地版本库和工作区所有文件的区别</p><p><code>git diff HEAD -- [file-name]</code> 查看最新本地版本库和工作区文件的却别</p><p><code>git diff HEAD^ -- [file-name]</code> 查看本地上一个版本和工作区文件的却别</p><p><code>git diff [local branch] origin/[remote branch]</code> 比较本地分支和远程分支的区别</p><h4 id="4-3、status"><a href="#4-3、status" class="headerlink" title="4.3、status"></a>4.3、status</h4><hr><p><code>git status [file-name]</code> 查看指定文件状态</p><p><code>git status</code> 查看所有文件状态</p><h4 id="4-4、add"><a href="#4-4、add" class="headerlink" title="4.4、add"></a>4.4、add</h4><hr><p><code>git add [file-name1] [file-name2] ...</code> 从工作区添加指定文件到暂存区</p><p><code>git add .</code> 将工作区的被修改的文件和新增的文件提交到暂存区，不包括被删除的文件</p><p><code>git add -u .</code> u指update，将工作区的被修改的文件和被删除的文件提交到暂存区，不包括新增的文件</p><p><code>git add -A .</code> A指all，将工作区被修改、被删除、新增的文件都提交到暂存区</p><h4 id="4-5、commit"><a href="#4-5、commit" class="headerlink" title="4.5、commit"></a>4.5、commit</h4><hr><ul><li><code>git commit -m [massage]</code> 将暂存区所有文件添加到本地仓库</li><li><code>git commit [file-name-1] [file-name-2] -m [massage]</code> 将暂存区指定文件添加到本地仓库</li><li><code>git commit -am [massage]</code> 将工作区的内容直接加入本地仓库</li><li><code>git commit --amend</code> 快速将当前文件修改合并到最新的commit，不会产生新的commit。<ul><li>在提交commit后发现还有部分文件修改忘记提交了可以是用该命令加<code>-m</code>是指直接在后面写上版本的注释，不加<code>-m</code>的话会用一个vim打开文件让你写入massage，有未追踪的文件将会失败，需要add加入暂存区。</li></ul></li></ul><hr><h4 id="4-6、clean"><a href="#4-6、clean" class="headerlink" title="4.6、clean"></a>4.6、clean</h4><ul><li><code>git clean -df</code> 加<code>-d</code>是指包含目录，加<code>-f</code>是指强制，删除所有未跟踪的文件</li></ul><hr><h4 id="4-7、log"><a href="#4-7、log" class="headerlink" title="4.7、log"></a>4.7、log</h4><ul><li><p><code>git log</code> 显示所有commit日志</p></li><li><p><code>git log --pretty=oneline</code> 将日志缩写为单行显示</p></li><li><p><code>git log --graph --pretty=oneline --abbrev-commit</code> 查看分支合并情况</p></li><li><p><code>git log --oneline --decorate --graph --all</code> 查看分叉历史，包括：提交历史、各个分支的指向以及项目的分支分叉情况。</p></li><li><p><code>git log -3</code> 查看最新3条commit日志数据</p></li></ul><hr><h4 id="4-8、reflog"><a href="#4-8、reflog" class="headerlink" title="4.8、reflog"></a>4.8、reflog</h4><p><code>git reflog</code> 显示操作本地版本库的命令，包括commit和reset等，在回退版本以后又后悔找不到commit id了可以使用此命令查看历史</p><hr><h5 id="4-9、push"><a href="#4-9、push" class="headerlink" title="4.9、push"></a>4.9、push</h5><ul><li><p><code>git push</code> 将文件添加到远程仓库</p></li><li><p><code>git push -f</code> 强制提交，当我们本地reset到旧的版本时，然后普通push会被拦截，因为此是本地HEAD指向比远程库还要旧</p></li><li><p><code>git push origin [branch-name]</code> 推送当前本地分支到指定远程分支</p></li></ul><hr><h4 id="4-10、rm"><a href="#4-10、rm" class="headerlink" title="4.10、rm"></a>4.10、rm</h4><p><code>git rm --cached [file-name]</code> 删除暂存区的文件</p><p><code>git rm -rf .</code> 不但删除所有暂存区的文件，还删除所有工作区的物理文件</p><hr><h4 id="4-11、checkout"><a href="#4-11、checkout" class="headerlink" title="4.11、checkout"></a>4.11、checkout</h4><pre class="line-numbers language-none"><code class="language-none">git checkout -- [file-name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最好加<code>--</code>，没有的话就把它当作切换分支看待，切换到另一个分支了，如果没有这个分支也会把它当作文件执行。</li><li>用暂存区的文件覆盖掉工作区的文件</li><li>如果暂存区没有可更新的就会用commit的文件更新工作区的文件</li></ul><p><code>git checkout [branch]</code> 切换分支</p><p><code>git checkout -b [new-branch-name]</code> 创建并切换分支</p><hr><h4 id="4-12、reset"><a href="#4-12、reset" class="headerlink" title="4.12、reset"></a>4.12、reset</h4><p><strong>当对整个版本进行操作</strong></p><pre class="line-numbers language-none"><code class="language-none">git reset --{soft|(mixed)|hard} HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--soft</code> 其中可选参数soft表示单纯的切换HEAD指向的commit-id</li><li><code>--mixed</code> 默认值mixed参数表示先执行上面一步，然后再将commit-id里面的内容更新到暂存区</li><li><code>--hard</code> hard表示先执行上面两步，然后再将暂存区内容同步到工作区</li></ul><p><code>git reset --hard HEAD^^</code> 用上两个版本里的所有文件撤回到暂工作区</p><p><code>git reset --hard [commit id]</code> 用指定版本的所有文件撤回到工作区</p><p><strong>当对当个文件进行操作</strong></p><pre class="line-numbers language-none"><code class="language-none">git reset HEAD [file-name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对单个文件操作时候只能用mixed参数，而且还是可省略</li><li>对单个文件操作时候HEAD指向不会变</li><li>将commit中指定的文件同步到暂存区中</li></ul><p><code>git reset [commit-id] [file-name]</code> 将指定commit-id中的文件替换掉暂存区的文件</p><p><strong>切换分支的比较</strong></p><p><code>git reset [branch]</code> 切换分支，但这里的切换分支和上面的<code>git checkout [branch]</code>切换分支不同，下图说明：</p><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/git%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2.png" alt="image-20230925102630453"></p><h4 id="4-13、revert"><a href="#4-13、revert" class="headerlink" title="4.13、revert"></a>4.13、revert</h4><pre class="line-numbers language-none"><code class="language-none">git revert -n [commit-id]git revert -n HEAD^^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>撤回版本的比较</strong></p><ul><li>reset 切换版本是会删除丢弃最新的版本的，HEAD会直接跳到指定版本，但是还是可以通过reflog找回。</li></ul><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/git%E6%92%A4%E5%9B%9E%E7%89%88%E6%9C%AC%E6%AF%94%E8%BE%83.png" alt="image-20230925102718544"></p><ul><li>revert 会将指定的bug版本视为bug版，会将当前版本中的bug版的代码删除，生成新的commit覆盖掉当前commit，但是commit-id是不会变的。</li></ul><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/git%E7%9A%84revert%E5%91%BD%E4%BB%A4.png" alt="image-20230925102926761"></p><h4 id="4-14、branch"><a href="#4-14、branch" class="headerlink" title="4.14、branch"></a>4.14、branch</h4><p><code>git branch [branch-name]</code> 创建分支</p><p><code>git branch</code> 查看当前分支</p><p><code>git branch -a</code> 查看本地和远程的所有分支</p><p><code>git branch -r</code> 查看远程所有分支</p><p><code>git branch -d [branch-name]</code> 删除一个分支</p><p><code>git branch -D [branch-name]</code> 强制删除一个没有合并的分支</p><p><code>git branch --set-upstream-to=origin/[branch-name] [branch-name]</code> 把本地分支和远程分支进行连接</p><hr><h4 id="4-15、merge"><a href="#4-15、merge" class="headerlink" title="4.15、merge"></a>4.15、merge</h4><p><code>git merge</code> 合并本地<code>origin/[branch-name]</code>和<code>HEAD-&gt;[branch-name]</code>的代码，并同步到工作空间</p><p><code>git merge [branch-name]</code> 用于合并指定分支到当前分支</p><p><code>git merge --quit</code> 退出当前分支合并，当合并后冲突很多，要撤回合并分支就可以用这个命令</p><p><code>git merge --no-ff -m [massage] [branch-name]</code> 不使用Fast forward合并分支，这样会创建新的commit，所以需要massage。这样被合并的分支HEAD指向是会变的。</p><ul><li>如果使用了Fast forward方式合并分支，那么删除次要分支的时候历史分支记录也会被删除，这样就无法追寻分支合拼信息了。</li></ul><hr><h4 id="4-16、switch"><a href="#4-16、switch" class="headerlink" title="4.16、switch"></a>4.16、switch</h4><p><code>git switch -c [branch-name]</code> 创建新分支并切换到该分支</p><p><code>git switch [branch-name]</code> 切换到已有分支</p><hr><h4 id="4-17、stash"><a href="#4-17、stash" class="headerlink" title="4.17、stash"></a>4.17、stash</h4><p><code>git stash</code> 隐藏当前工作的修改</p><ul><li>如果不隐藏自己修改的半成品代码，就会发生切换到别的分支后，将然后自己的半成品代码带入其他分支，这样就发生很多不必要的麻烦。</li></ul><p><code>git stash save message</code> 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p><p><code>git stash list</code> 查看隐藏的工作信息列表</p><p><code>git stash drop</code> 删除隐藏的工作信息</p><p><code>git stash pop</code> 恢复隐藏的工作信息，同时删除隐藏的工作信息</p><p><code>git stash apply [stash@{0}]</code> 恢复指定的隐藏工作信息，但是不会删除隐藏的工作信息</p><hr><h4 id="4-18、cherry-pick"><a href="#4-18、cherry-pick" class="headerlink" title="4.18、cherry-pick"></a>4.18、cherry-pick</h4><p><code>git cherry-pick [commit-id]</code> 这个是复制一次commit提交，然后在当前分支上重新提交一遍；也就是将指定commit的合并到当前分支；</p><ul><li>这种适用于在其他分支上修复了bug，但是这个bug在当前分支上依然存在，所以可以复制这个commit的过程，不必重写代码。</li></ul><h4 id="4-19、remote"><a href="#4-19、remote" class="headerlink" title="4.19、remote"></a>4.19、remote</h4><p><code>git remote add origin 远程地址</code> 关联远程仓库</p><p><code>git remote</code> 查看本地添加了哪些远程分支地址</p><p><code>git remote -v</code> 查看本地添加了哪些远程分支地址更详细信息</p><p><code>git remote remove origin</code> 删除本地指定的远程地址</p><hr><h4 id="4-20、fetch"><a href="#4-20、fetch" class="headerlink" title="4.20、fetch"></a>4.20、fetch</h4><pre class="line-numbers language-none"><code class="language-none">git fetch` 拉取远程分支最新的commit到本地仓库的`origin/[branch-name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="4-21、pull"><a href="#4-21、pull" class="headerlink" title="4.21、pull"></a>4.21、pull</h4><p><code>git pull</code> 从远程仓库拉取代码到工作空间</p><p><strong>pull 和 fetch的关系</strong></p><ul><li><code>git pull</code> == <code>git fetch</code> + <code>git merge</code></li></ul><hr><h4 id="4-22、tag"><a href="#4-22、tag" class="headerlink" title="4.22、tag"></a>4.22、tag</h4><p><code>git tag</code> 查看所有标签</p><p><code>git tag [version]</code> 给当前最新的commit打上标签</p><p><code>git tag [version] [commit-id]</code> 给指定的commit-id打上标签</p><p><code>git tag -a [version] -m [massage] [commit-id]</code> 给指定的commit-id打上标签并附上说明文字</p><p><code>git tag -d [version]</code> 删除标签</p><hr><h4 id="4-23、show"><a href="#4-23、show" class="headerlink" title="4.23、show"></a>4.23、show</h4><p><code>git show [tag-name]</code> 查看标签的详细信息</p><hr><h4 id="4-24、rebase"><a href="#4-24、rebase" class="headerlink" title="4.24、rebase"></a>4.24、rebase</h4><p><code>git rebase -i HEAD~2</code> 合并前两个历史提交，会弹出vim修改信息，修改第二行的pick为s，或者为squash，squash为合并的意识，然后保存退出编辑，会打开第二个vim编辑，合并并修改commit内容，保存退出会产生一个新的commit id，这样就合并了两个commit</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2023/09/24/hello-world/"/>
      <url>/2023/09/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="头部设置"><a href="#头部设置" class="headerlink" title="头部设置"></a>头部设置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">title: 文章名称date: <span class="token number">2021</span>-09-01 09:36:05tags: <span class="token punctuation">[</span>标签1,标签2<span class="token punctuation">]</span>categories: - <span class="token string">"类别"</span>- <span class="token string">"子类别"</span>comments: <span class="token boolean">true</span> <span class="token comment"># 是否可评论</span>toc: <span class="token boolean">true</span> <span class="token comment"># 是否显示文章目录</span>top: <span class="token boolean">true</span> <span class="token comment"># 置顶设置</span><span class="token comment"># 设置图片</span>cover: /img/hello-world.jpgcoverWidth: <span class="token number">1200</span>coverHeight: <span class="token number">750</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="友链格式"><a href="#友链格式" class="headerlink" title="友链格式"></a>友链格式</h3><pre class="line-numbers language-none"><code class="language-none">- [![标题](https://example.com/logo.png)](https://example.com/ "标题")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://shuyancoding.oss-cn-beijing.aliyuncs.com/1.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
